# Generated from compiler/Splikit.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,222,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,3,5,99,8,5,1,5,4,5,102,8,5,11,5,12,5,103,1,6,3,6,107,8,6,1,6,5,
        6,110,8,6,10,6,12,6,113,9,6,1,6,1,6,4,6,117,8,6,11,6,12,6,118,1,
        7,1,7,5,7,123,8,7,10,7,12,7,126,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,3,8,139,8,8,1,9,1,9,1,9,1,9,1,10,1,10,5,10,147,8,
        10,10,10,12,10,150,9,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,207,8,33,10,33,12,33,
        210,9,33,1,33,1,33,1,33,1,33,1,34,4,34,217,8,34,11,34,12,34,218,
        1,34,1,34,2,124,208,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,231,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,74,
        1,0,0,0,5,79,1,0,0,0,7,84,1,0,0,0,9,90,1,0,0,0,11,98,1,0,0,0,13,
        106,1,0,0,0,15,120,1,0,0,0,17,138,1,0,0,0,19,140,1,0,0,0,21,144,
        1,0,0,0,23,151,1,0,0,0,25,153,1,0,0,0,27,155,1,0,0,0,29,157,1,0,
        0,0,31,159,1,0,0,0,33,161,1,0,0,0,35,164,1,0,0,0,37,167,1,0,0,0,
        39,169,1,0,0,0,41,171,1,0,0,0,43,174,1,0,0,0,45,177,1,0,0,0,47,180,
        1,0,0,0,49,183,1,0,0,0,51,185,1,0,0,0,53,187,1,0,0,0,55,189,1,0,
        0,0,57,191,1,0,0,0,59,193,1,0,0,0,61,195,1,0,0,0,63,197,1,0,0,0,
        65,199,1,0,0,0,67,202,1,0,0,0,69,216,1,0,0,0,71,72,5,105,0,0,72,
        73,5,102,0,0,73,2,1,0,0,0,74,75,5,101,0,0,75,76,5,108,0,0,76,77,
        5,115,0,0,77,78,5,101,0,0,78,4,1,0,0,0,79,80,5,102,0,0,80,81,5,117,
        0,0,81,82,5,110,0,0,82,83,5,99,0,0,83,6,1,0,0,0,84,85,5,119,0,0,
        85,86,5,104,0,0,86,87,5,105,0,0,87,88,5,108,0,0,88,89,5,101,0,0,
        89,8,1,0,0,0,90,91,5,114,0,0,91,92,5,101,0,0,92,93,5,116,0,0,93,
        94,5,117,0,0,94,95,5,114,0,0,95,96,5,110,0,0,96,10,1,0,0,0,97,99,
        5,45,0,0,98,97,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,102,7,0,
        0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,
        0,0,104,12,1,0,0,0,105,107,5,45,0,0,106,105,1,0,0,0,106,107,1,0,
        0,0,107,111,1,0,0,0,108,110,7,0,0,0,109,108,1,0,0,0,110,113,1,0,
        0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,
        0,0,114,116,5,46,0,0,115,117,7,0,0,0,116,115,1,0,0,0,117,118,1,0,
        0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,14,1,0,0,0,120,124,5,34,
        0,0,121,123,9,0,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,125,1,0,
        0,0,124,122,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,128,5,34,
        0,0,128,16,1,0,0,0,129,130,5,116,0,0,130,131,5,114,0,0,131,132,5,
        117,0,0,132,139,5,101,0,0,133,134,5,102,0,0,134,135,5,97,0,0,135,
        136,5,108,0,0,136,137,5,115,0,0,137,139,5,101,0,0,138,129,1,0,0,
        0,138,133,1,0,0,0,139,18,1,0,0,0,140,141,5,110,0,0,141,142,5,105,
        0,0,142,143,5,108,0,0,143,20,1,0,0,0,144,148,7,1,0,0,145,147,7,2,
        0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,
        0,0,149,22,1,0,0,0,150,148,1,0,0,0,151,152,5,43,0,0,152,24,1,0,0,
        0,153,154,5,45,0,0,154,26,1,0,0,0,155,156,5,42,0,0,156,28,1,0,0,
        0,157,158,5,47,0,0,158,30,1,0,0,0,159,160,5,37,0,0,160,32,1,0,0,
        0,161,162,5,61,0,0,162,163,5,61,0,0,163,34,1,0,0,0,164,165,5,33,
        0,0,165,166,5,61,0,0,166,36,1,0,0,0,167,168,5,62,0,0,168,38,1,0,
        0,0,169,170,5,60,0,0,170,40,1,0,0,0,171,172,5,62,0,0,172,173,5,61,
        0,0,173,42,1,0,0,0,174,175,5,60,0,0,175,176,5,61,0,0,176,44,1,0,
        0,0,177,178,5,38,0,0,178,179,5,38,0,0,179,46,1,0,0,0,180,181,5,124,
        0,0,181,182,5,124,0,0,182,48,1,0,0,0,183,184,5,33,0,0,184,50,1,0,
        0,0,185,186,5,46,0,0,186,52,1,0,0,0,187,188,5,44,0,0,188,54,1,0,
        0,0,189,190,5,61,0,0,190,56,1,0,0,0,191,192,5,40,0,0,192,58,1,0,
        0,0,193,194,5,41,0,0,194,60,1,0,0,0,195,196,5,123,0,0,196,62,1,0,
        0,0,197,198,5,125,0,0,198,64,1,0,0,0,199,200,5,45,0,0,200,201,5,
        62,0,0,201,66,1,0,0,0,202,203,5,47,0,0,203,204,5,47,0,0,204,208,
        1,0,0,0,205,207,9,0,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,209,
        1,0,0,0,208,206,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,
        5,10,0,0,212,213,1,0,0,0,213,214,6,33,0,0,214,68,1,0,0,0,215,217,
        7,3,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,
        1,0,0,0,219,220,1,0,0,0,220,221,6,34,0,0,221,70,1,0,0,0,11,0,98,
        103,106,111,118,124,138,148,208,218,1,6,0,0
    ]

class SplikitLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FUNC = 3
    WHILE = 4
    RETURN = 5
    INT = 6
    FLOAT = 7
    STRING = 8
    BOOL = 9
    NIL = 10
    ID = 11
    ADD = 12
    SUB = 13
    MUL = 14
    DIV = 15
    MOD = 16
    EEQ = 17
    NEQ = 18
    GT = 19
    LT = 20
    GTE = 21
    LTE = 22
    AND = 23
    OR = 24
    NOT = 25
    DOT = 26
    COMMA = 27
    ASSIGN = 28
    LPAREN = 29
    RPAREN = 30
    LBRACE = 31
    RBRACE = 32
    RETURNS = 33
    COMMENT = 34
    WHITESPACE = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'func'", "'while'", "'return'", "'nil'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'>'", "'<'", 
            "'>='", "'<='", "'&&'", "'||'", "'!'", "'.'", "','", "'='", 
            "'('", "')'", "'{'", "'}'", "'->'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FUNC", "WHILE", "RETURN", "INT", "FLOAT", "STRING", 
            "BOOL", "NIL", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", "EEQ", 
            "NEQ", "GT", "LT", "GTE", "LTE", "AND", "OR", "NOT", "DOT", 
            "COMMA", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RETURNS", 
            "COMMENT", "WHITESPACE" ]

    ruleNames = [ "IF", "ELSE", "FUNC", "WHILE", "RETURN", "INT", "FLOAT", 
                  "STRING", "BOOL", "NIL", "ID", "ADD", "SUB", "MUL", "DIV", 
                  "MOD", "EEQ", "NEQ", "GT", "LT", "GTE", "LTE", "AND", 
                  "OR", "NOT", "DOT", "COMMA", "ASSIGN", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "RETURNS", "COMMENT", "WHITESPACE" ]

    grammarFileName = "Splikit.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


